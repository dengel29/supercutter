<!doctype html>
<html lang="en">
  <head>
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/styles/styling.css">
    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
  </head>
  <body>
    {% block  content %}
    {% endblock %}
    <script>
      function videoSearch() {
        return {
          videoData: null,
          videoSearchError: null,
          videoFound: false,
          isLoading: false,
          filterWord: '',
          title: null,
          videoURLOrID: '',
          video: null,
          filteredCaptions: null,
          sendableCaptions: '',
          searchYoutube() {
            // send the ID or URL to see if the video exists;
            // returns to client subtitles if it does exist;
            // returns an error message if it does not exist;
            this.isLoading = true;
            fetch(`http://localhost:3000/search-video/${this.videoURLOrID}`, {
              method: 'POST'
            })
            .then(res => res.json())
            .then(data => {
              this.isLoading = false;
              if (data.errorMessage) {
                this.videoSearchError = data.errorMessage;
                this.videoData = null;
                this.filteredCaptions = null;
                this.videoFound = false;
              } else {
                this.videoSearchError = null;
                console.log(data.videoData);
                this.videoFound = true;
                this.videoData = data.videoData
                this.filteredCaptions = data.videoData.captions
              }
            })   
          },
          filterCaptions() {
            // filter captions that have already been returned;
            this.filteredCaptions = this.videoData.captions.filter(line => line.text.includes(this.filterWord))

          },
          
          downloadVideo() {
            let body = {body: this.filteredCaptions}
            
            // vsY0pdCW9N0
            // send the filtered captions to create the supercut;
            // TODO return a link to video download

            fetch(`http://localhost:3000/download/${this.videoData.videoID}/${this.videoData.videoTitle}/${this.filterWord}`, {
              method: 'POST',
              body: JSON.stringify(body),
              headers: {
                'Content-Type': 'application/json'
              }
            })
            .then(res => res.json())
            .then(data => {
              console.log(data)
            })
          }
          
        }
      }
    </script>
  </body>
</html>
